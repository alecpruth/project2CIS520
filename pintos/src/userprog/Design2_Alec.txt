		           +--------------------------+
				   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members. 

/* NOTE PLEASE READ!!! I had originally planned my Spring Break around the original due date of March 11. 
With the deadline extended I worked all the way up with my group and had finished everything 
but exec system call and synchornization. This doc has everything I worked on untill my departure
on March 15th */

Alec Ruth
Cre Moore
Travis Atchison

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Chandra again helped out a submantial amount in helping us understand how to code and attack this project.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff. 

none

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    
process.c 
	#define INITIAL_USER_PAGE 0x08048000 - PGSIZE
		This was used to create a new page that was used with argument passing

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The most important part was to setup the stack. We did it inside start_process() in process.c
after page is installed, when the stack has been initialized.

Process_execute provides file_name, including command and arguments
string. First, we separated the first token and the rest, which are command and
arguments. We use command as the new thread's name, and pass down the arguments
string to start_process(), load() and setup_stack(). We created a new page to add 
space for arguments. We tested this with the echo program so we know that we 
can pass up to 128 arguments, because that is how much was 
specified in the project document.

When setting up the stack, we strlcpy the argument string and then passed it on as
the next token. We then add alignment, scan the string to get each token 
and push its address into the page underneath the alignment 
to generate argv[], finally argv, argc and return address. This is what it look like

strlcpy((char *)INITIAL_USER_PAGE, cmd_string, strlen(cmd_string) + 1);
    
    /*Parse command*/
    next_token = strtok_r((char *)INITIAL_USER_PAGE, " \t", &next_ptr);
    
    argv[0] = next_token;
    
    while(1){
        next_token = strtok_r(NULL, " \t", &next_ptr);
        if(next_token == NULL) 
            break;
        argv[argc++] = next_token;
    }
    
    push_arg(&if_.esp, (uint32_t)argv);
    push_arg(&if_.esp, (uint32_t)argc);
    push_arg(&if_.esp, (uint32_t)&argv[0]);

We prevented overflowing by make an entire new page to pass in the arguments, #define INITIAL_USER_PAGE 0x08048000 - PGSIZE

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The only difference between strtok_r() and strtok() is that the save_ptr
in strtok_r() is given by the caller. In pintos, the kernel
separates commands into command line with the executable name and arguments. 
So we need to put the address of the arguments somewhere that can be accessed later.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) Shortening the time inside kernel
2) Robust checking. Checking whether the executable is there before passing it
to kernel to avoid kernel fail. Checking whether the arguments are over the
limit. 


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.h
	
    /* these were used to indicate a child's status and keep track of threads */
    struct thread * parent;             /* parent process of this thread */
    struct list waiters_list;           /* This is the list of all the threads waiting for this thread to exit or terminate */
    struct list_elem wait_elem;         /* Waitlist elem */
    struct semaphore wait_child_sema;   /* thread waiting for child to finish */
    bool waiting_for_child;             /* indicates process waiting for child to die*/
    int child_exit_status;		/* child exit status */
    int exit_status;                    /* own exit status */

syscall.c

	bool valid_ptr(void *ptr);

	bool valid_ptr(void * ptr)
	{
   		 if( (ptr == NULL) || !is_user_vaddr(ptr) || !pagedir_get_page(thread_current()->pagedir, ptr) )
    		{
        		return false;
   		}
    
    		else {
        	return true;
    		}
	} /* this was used to help validate pointers */

	static struct file * fd_to_file_ptr[20]; /* used to keep all file discriptors */


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

file descriptors have a one-to-one mapping to each file that is 
opened through a syscall. This means that the file descriptor is unique within the entire OS.
So we decided to maintain a static struct file * fd_to_file_ptr[20];

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Read: 
	First we take all the information of the stack and store the information
	with a file discriptor, buffer, and size. We then to the file discriptor and
	put it in our file array. After that we checked to see if it was valid or not.
	If it was valid we would push it to the eax register to be read. I know there 
	needs to be synchorinization. (Note this is again due to my early departure for break, I assume my group to finish 
	this).
Write:
	Write is very similar to the read. When the given fd is STDIN_FILENO, then
	return -1. When fd is STDOUT_FILENO, then use printf to
	print the content of buffer to the console.

	

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For a full page of data:
The least number is 1. If the first inspection(pagedir_get_page) get a page head
back, which can be tell from the address, we don’t actually need to inspect any
more, it can contain one page of data.

The greatest number could possible be 4096 in that case we have
to check every address to ensure a valid access. When it’s contiguous, the
greatest number would be 2, if we get a kernel virtual address that is not a
page head, we want to check the start pointer and the end pointer of the
full page data to see if it is mapped or not. 

for 2 bytes of data the least number will be 1 same as above. The only different is 
that the greates number will be 2 contiguous or not.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
	
we first took made a list to keep all the waiting threads in. we then put the waiting thread
into the list and blocked the thread untill the child exited. once the child exited we went
through the list waking up the threads that were waiting and having them execute.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Avoiding bad user memory access is done by checking before validating. We did this by
using the function valid_ptr we wrote to check if a ptr is
NULL or whether it’s a valid user address 
Taking the open system call as an example, the esp
pointer and the one argument pointer will be checked first, if anything is
invalid, we will terminate the process.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
I was not here to implement
>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
I was not here to implement 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did? 

We did this by validating first and making sure that it was ok to use. We 
also determined that all the sys_calls would eventual go through the kernel so 
access to user memory is a must.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors? 

The array could run out and it is hard to find the owner
of each syscall. It was good because it was straight forward and easy to use.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach? did not change 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
